// Code generated by protoc-gen-bomboglot. DO NOT EDIT.
// versions:
// 	protoc-gen-bomboglot: v0.0.1
// 	protoc:             (unknown)
// source: api/dummy/dummy.proto

package account

import (
	context "context"
	go_grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpc "google.golang.org/grpc"
)

import _ "embed"

//go:embed dummy.swagger.json
var swaggerJSON []byte

// DummyServiceServiceDesc is description for the DummyServiceServer.
type DummyServiceServiceDesc struct {
	svc DummyServiceServer
	i   grpc.UnaryServerInterceptor
}

func NewDummyServiceServiceDesc(i DummyServiceServer) *DummyServiceServiceDesc {
	return &DummyServiceServiceDesc{svc: i}
}

func (d *DummyServiceServiceDesc) Swagger() []byte {
	return swaggerJSON
}

func (d *DummyServiceServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterDummyServiceServer(s, d.svc)
}

func (d *DummyServiceServiceDesc) RegisterGateway(ctx context.Context, mux *runtime.ServeMux) error {
	if d.i == nil {
		return RegisterDummyServiceHandlerServer(ctx, mux, d.svc)
	}
	return RegisterDummyServiceHandlerServer(ctx, mux, &proxyDummyServiceServer{
		DummyServiceServer: d.svc,
		interceptor:        d.i,
	})
}

// WithHTTPUnaryInterceptor adds GRPC Server Interceptor for HTTP gateway requests. Call again for multiple Interceptors.
func (d *DummyServiceServiceDesc) WithHTTPUnaryInterceptor(u grpc.UnaryServerInterceptor) {
	if d.i == nil {
		d.i = u
	} else {
		d.i = go_grpc_middleware.ChainUnaryServer(d.i, u)
	}
}

type proxyDummyServiceServer struct {
	DummyServiceServer
	interceptor grpc.UnaryServerInterceptor
}

func (p *proxyDummyServiceServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.DummyServiceServer,
		FullMethod: "/dummy.DummyService/Ping",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return p.DummyServiceServer.Ping(ctx, req.(*PingRequest))
	}
	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*PingResponse), nil
}
