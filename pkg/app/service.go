package app

import (
	"context"
	"encoding/json"
	"fmt"
	"log"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"

	"github.com/yesmishgan/go-pokeball/pkg/mergemap"
)

// Service is a registerable collection of endpoints.
// These functions should be autogenerated by protoc-gen-scratch.
type Service interface {
	GetDescription() ServiceDesc
}

// swagJoiner glues up several Swagger definitions to one.
// This is one dirty hack...
type swagJoiner struct {
	result map[string]any
}

// AddDefinition adds another definition to the soup.
func (c *swagJoiner) AddDefinition(buf []byte) error {
	def := map[string]any{}

	err := json.Unmarshal(buf, &def)
	if err != nil {
		return fmt.Errorf("couldn't unmarshal JSON def: %w", err)
	}
	if c.result == nil {
		c.result = def
		return nil
	}
	c.result = mergemap.Merge(c.result, def)
	return nil
}

// SumDefinitions returns a (hopefully) valid Swagger definition combined
// from everything that came up .AddDefinition().
func (c *swagJoiner) SumDefinitions() []byte {
	if c.result == nil {
		c.result = map[string]interface{}{}
	}
	ret, err := json.Marshal(c.result)
	if err != nil {
		panic(err)
	}
	return ret
}

// ServiceDesc is a description of an endpoints' collection.
// These functions should be autogenerated by protoc-gen-scratch.
type ServiceDesc interface {
	RegisterGRPC(*grpc.Server)
	RegisterGateway(context.Context, *runtime.ServeMux) error
	Swagger() []byte
}

// CompoundServiceDesc combines several ServiceDesc.
type CompoundServiceDesc struct {
	svc []ServiceDesc
}

// NewCompoundServiceDesc returns new CompoundServiceDesc.
func NewCompoundServiceDesc(desc ...ServiceDesc) *CompoundServiceDesc {
	return &CompoundServiceDesc{svc: desc}
}

// RegisterGRPC implements service registrator interface.
func (d *CompoundServiceDesc) RegisterGRPC(g *grpc.Server) {
	for _, svc := range d.svc {
		svc.RegisterGRPC(g)
	}
}

// Swagger returns this file's Swagger definition.
func (d *CompoundServiceDesc) Swagger() []byte {
	var (
		j = &swagJoiner{}
	)

	for _, svc := range d.svc {
		if err := j.AddDefinition(svc.Swagger()); err != nil {
			log.Fatalf("error while join swagger def: %v", err)
		}
	}

	return j.SumDefinitions()
}

// RegisterGateway registers this service's HTTP handlers/bindings generated by grpc-gateway
func (d *CompoundServiceDesc) RegisterGateway(ctx context.Context, mux *runtime.ServeMux) error {
	for _, svc := range d.svc {
		if err := svc.RegisterGateway(ctx, mux); err != nil {
			log.Fatalf(err.Error())
		}
	}

	return nil
}
